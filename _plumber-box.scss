// *** PLUMBER BOX ***
// Align boxes to the baseline grid
@mixin plumber-box(
	$margin: 0 0,
	$border: 0px 0px,
	$padding: 0 0,
	$grid-height: null
) {
	// *** VALIDATE PARAMETERS ***
	// if grid-height is missing try to get it from Plumber defaults
	@if not $grid-height {
		$grid-height: -plumber-get-default(grid-height);
	}
	@if not $grid-height {
		// no luck :(
		@error '$grid-height must be passed as a parameter or defined in plumber defaults';
	} @else if unitless($grid-height) or $grid-height <= 0 {
		// got it, check validity
		@error '$grid-height parameter must be a positive unit, got #{$grid-height} instead';
	}
	// if margin has one value use it for both top and bottom, then check is it!s integer
	@if length($margin) == 1 {
		$top: $margin;
		$margin: ($top $top);
	}
	@each $value in $margin {
		@if not -plumber-is-integer($value) {
			@error '$margin values must be integers, got $value instead';
		}
	}
	// if border has one value use it for both top and bottom
	@if length($border) == 1 {
		$top: $border;
		$border: ($top $top);
	}
	@each $value in $border {
		@if unitless($value) or $value < 0 {
			@error '$border values must be positive, got $value instead';
		}
	}
	// if padding has one value use it for both top and bottom
	@if length($padding) == 1 {
		$top: $padding;
		$padding: ($top $top);
	}
	@each $value in $padding {
		@if not -plumber-is-integer($value) or $value < 0 {
			@error '$padding values must be non-negative integers, got $value instead';
		}
	}

	// generate margins and paddings
	@each $position, $index in (top: 1, bottom: 2) {
		margin-#{$position}: calc(#{nth($margin, $index) * $grid-height} - #{nth($border, $index)});
		padding-#{$position}: nth($padding, $index) * $grid-height;
	}
}